# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SudutJarakDialog
                                 A QGIS plugin
 Penggambaran sudut dan jarak
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-09-30
        git sha              : $Format:%H$
        copyright            : (C) 2021 by SandySetyanagara
        email                : sandysetyanagara@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         * 
 ***************************************************************************/
"""

import math
import os

import processing, os, subprocess, time
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QTableWidgetItem, QDialog
from qgis.core import QgsVectorLayer, QgsProject, QgsFeature, QgsGeometry,QgsPointXY,QgsField,Qgis,QgsCoordinateReferenceSystem,QgsCoordinateTransform
from qgis.utils import iface
from PyQt5.QtCore import QVariant,QCoreApplication
from qgis.gui import QgsEncodingFileDialog

from math import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'sudut_jarak_dialog_base.ui'))

class SudutJarakDialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        """Constructor."""
        super(SudutJarakDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.iface = iface
        self.encoding = None
        self.measureDialog = DialogXandY(self.iface, parent)
        self.proyeksi = "32749"
        self.idTitik = 1
        self.idJarak = 1
        self.pertamaPoint = True
        self.pertamaLine = True
        self.pertamaPlot = True
        self.check_garis.setEnabled(False)
        self.projection.crsChanged.connect(self.set_crs)
        # self.projection.setCrs()
        self.input_az.setEnabled(False)
        self.input_jarak.setEnabled(False)
        self.reset.setEnabled(False)
        self.plot.clicked.connect(self.gambar_plot)
        self.reset.clicked.connect(self.reset_plot)
        
    def reset_plot(self):
        self.pertamaPlot = True
        self.reset.setEnabled(False)
        self.input_x.setEnabled(True)
        self.input_y.setEnabled(True)
        self.input_az.setEnabled(False)
        self.input_jarak.setEnabled(False)
        self.check_garis.setEnabled(False)
    
    def gambar_plot(self):
        """ Lakukan sesuatu ketika tombol ditekan """
        # memanggil isi dari Line Edit pada kolom X dan
        # menyimpannya pada variabel self.nilai_x
        # sekaligus mengkonversinya menjadi angka

        try:
            # cetak isi nilai X
            # Mengcheck apakah plot pertama dijalankan atau tidak
            if self.pertamaPlot:
                self.x = float(self.input_x.text())
                self.y = float(self.input_y.text())
               
                self.input_x.setEnabled(False)
                self.input_y.setEnabled(False)
                self.input_az.setEnabled(True)
                self.input_jarak.setEnabled(True)
                self.reset.setEnabled(True)
                self.check_garis.setEnabled(True)

                #Mengecheck apakah layer point sudah di buat sebelumnya
                if self.pertamaPoint:
                    #Membuat layer titik
                    self.layerTitik = self.buat_layer("Plot Titik","Point")
                    self.measureDialog.show()
                    self.pertamaPoint = False
                    self.projection.setEnabled(False)

                self.buat_titik()
                self.pertamaPlot = False
            else:
                 #Mengecheck apakah checkbox check baris sudah di centang oleh user atau belum
                if self.check_garis.isChecked():
                    #Mengecheck apakah layer garis sudah di buat sebelumnya
                    if self.pertamaLine:
                        #Membuat layer garis
                        self.layerGaris = self.buat_layer("Plot Garis","LineString")
                        self.pertamaLine = False

                self.hitung_azimuth_jarak()

        except Exception as e:
            print(e)
            iface.messageBar().pushMessage("Error","anda salah memasukkan input", level=Qgis.Warning,duration=3)
    
    
    def set_crs(self):
        self._currentcrs = self.projection.crs()
        print(self._currentcrs.isGeographic())
        if self._currentcrs.isGeographic():
            self.label_x.setText("Bujur")
            self.label_y.setText("Lintang")
        else:
            self.label_x.setText("X")
            self.label_y.setText("Y")
        transformasi = self.transformasi("EPSG:3395","EPSG:4326",1,1)
        print(transformasi.x(),transformasi.y())
    # Fitur Tidak terlalu dibutuhkan
    # def output(self):
    #     """ open save layer dialog """
    #     settings = QgsSettings()
    #     dirName = settings.value("/UI/lastShapefileDir")
    #     encode = settings.value("/UI/encoding")
    #     fileDialog = QgsEncodingFileDialog(self, "Output shape file", dirName,
    #                                        "Shape file (*.shp)", encode)
    #     fileDialog.setDefaultSuffix("shp")
    #     fileDialog.setFileMode(QtWidgets.QFileDialog.AnyFile)
    #     fileDialog.setAcceptMode(QtWidgets.QFileDialog.AcceptSave)
    #     #fileDialog.setConfirmOverwrite(True)
    #     if not fileDialog.exec_() == QtWidgets.QDialog.Accepted:
    #         return
    #     files = fileDialog.selectedFiles()
    #     print(fileDialog)
    #     self.browserLine.setText(files[0])
    #     self.outputFile = files[0]
    #     self.encoding = fileDialog.encoding()

    def buat_layer(self ,namaLayer,type):
        #untuk buat layers
        layer = QgsVectorLayer(f"{type}?crs={self._currentcrs.authid()}",namaLayer, "memory")
        #MEnambahkan layer ke dalam peta
        QgsProject.instance().addMapLayer(layer)

        #Menambahkan Field ke dalam layer berdasarkan jenis layer
        if type == "Point":
            self.Tambah_field(layer,"FID","Int")
            self.Tambah_field(layer,"X","Double")
            self.Tambah_field(layer,"Y","Double")
        elif type == "LineString":
            self.Tambah_field(layer,"FID","Int")
            self.Tambah_field(layer,"Length","Double")

        return layer

    def Tambah_field(self,layer,namaLayer,typeData):
        #Mengatur jenis attribute berdasarkan tipe data
        if typeData=="Int":
            layer.dataProvider().addAttributes([QgsField(namaLayer,QVariant.Int)])
        elif typeData=="Double":
            layer.dataProvider().addAttributes([QgsField(namaLayer,QVariant.Double,'double', 10, 3)])
        layer.updateFields()
        
    def hitung_azimuth_jarak(self):
        try:
            #ini untuk mendapatkan nilai azimut(az) dan jarak(jarak)
            az = float(self.input_az.text())
            jarak = float(self.input_jarak.text())
            #Mengcheck apakah jarak yang dimasukkan lebih dari 30 kilometer
            assert jarak < 30863888.9, iface.messageBar().pushMessage("Error","Jarak yang anda masukkan melebihi batas kelengkungan bumi", level=Qgis.Warning,duration=4)
            #untuk memasukkan nilai x dan y awal atau sebelumnya
            x = self.x
            y = self.y

            # Melakuan transformasi koordinat ke world mercator
            transformasi = self.transformasi(self._currentcrs.authid(),"EPSG:32749",x,y)
            # untuk mengcheck apakah nilai azimuth lebih dari 360 derajat
            while az > 360:
                az = az - 360
            #Menghitung nilai koordinat
            transX = transformasi.x() + jarak*math.sin(az * math.pi/180)
            transY = transformasi.y() + jarak*math.cos(az * math.pi/180)

            # Melakuan transformasi koordinat ke sistem koordinat yang telah ditentukan pengguna
            transformasi = self.transformasi("EPSG:32749",self._currentcrs.authid(),transX,transY)
            
            self.x = transformasi.x()
            self.y = transformasi.y()
    
            if self.check_garis.isChecked():
                self.buat_garis(x,y)
                
            self.buat_titik()

        except Exception as e:
            print(e)
            iface.messageBar().pushMessage("Error","anda salah memasukkan input", level=Qgis.Warning,duration=1)
        
    
    def transformasi(self,EPSGFrom,EPSGDest,x,y):
        crsForm = QgsCoordinateReferenceSystem(EPSGFrom)
        crsDest = QgsCoordinateReferenceSystem(EPSGDest)
        context = QgsProject.instance()
        xform = QgsCoordinateTransform(crsForm, crsDest, context)
        transfpoint=xform.transform(QgsPointXY(x,y))
        return transfpoint

    def buat_garis(self,x,y):
        # mendefinisikan featuer garis
        featureGaris = QgsFeature()
        featureGaris.setGeometry(QgsGeometry.fromPolylineXY([QgsPointXY(x,y),QgsPointXY(self.x, self.y)]))

        #Menambahkan featuare garis ke dalam layer garis
        self.layerGaris.dataProvider().addFeatures([featureGaris])
        self.layerGaris.updateExtents()

        #Mengedit atau menambahkan atribute ke feature yang baru saja di tambahkan
        self.layerGaris.startEditing()
        self.layerGaris.changeAttributeValue(self.idJarak,0,self.idJarak)
        self.layerGaris.changeAttributeValue(self.idJarak,1,int(self.input_jarak.text()))
        self.layerGaris.commitChanges()

        self.idJarak = self.idJarak + 1

        self.iface.actionZoomToLayer().trigger()
    
    def buat_titik(self):
        """ buat titik di koordinat masukan """
        # Memberi fitur titik
        feature = QgsFeature()
        feature.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(self.x, self.y)))
        self.measureDialog.insertParams(self.idTitik,self.x,self.y)
        # menambahkan fitur pada layer
        self.layerTitik.dataProvider().addFeatures([feature])
        self.layerTitik.updateExtents()

        self.layerTitik.startEditing()
        self.layerTitik.changeAttributeValue(self.idTitik,0,self.idTitik)
        self.layerTitik.changeAttributeValue(self.idTitik,1,self.x )
        self.layerTitik.changeAttributeValue(self.idTitik,2,self.y )
        self.layerTitik.commitChanges()
        self.idTitik = self.idTitik+1

        self.iface.actionZoomToLayer().trigger()


FORM_CLASS2, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'XandYDialog.ui'))

class DialogXandY(QDialog, FORM_CLASS2):

    def __init__(self, iface, parent):
        super(DialogXandY, self).__init__(parent)
        self.setupUi(self)
        iface = iface
        self.canvas = iface.mapCanvas()

        self.tableWidget.setColumnCount(2)
        self.tableWidget.setSortingEnabled(False)
        self.tableWidget.setHorizontalHeaderLabels(["X", "Y"])
        
        self.capturedPoints = []
        self.distances = []
        self.activeMeasuring = True
        self.lastMotionPt = None
        self.currentDistance = 0.0

    def tr(self,string):
        return QCoreApplication.translate('@default', string)

    def insertParams(self, position, X, Y):
        if position > self.tableWidget.rowCount():
            self.tableWidget.insertRow(position - 1)
        item = QTableWidgetItem('{:.4f}'.format(X))
        self.tableWidget.setItem(position - 1, 0, item)
        item = QTableWidgetItem('{:.4f}'.format(Y))
        self.tableWidget.setItem(position - 1, 1, item)
    

    

